<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Panda的随笔</title>
    <link>https://chenxiaopang.github.io/tags/bash/</link>
    <description>Recent content in Bash on Panda的随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 08 Aug 2015 16:18:26 +0800</lastBuildDate><atom:link href="https://chenxiaopang.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bash的命令替换</title>
      <link>https://chenxiaopang.github.io/2015/08/08/bash%E7%9A%84%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Sat, 08 Aug 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/08/08/bash%E7%9A%84%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2/</guid>
      <description>命令替换是将命令替换为命令的执行输出，所有的shell支持使用反引号的方法进行命令替换。 Bash支持两种形式：$(command) 和\com</description>
    </item>
    
    <item>
      <title>top的用法</title>
      <link>https://chenxiaopang.github.io/2015/08/06/top%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 06 Aug 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/08/06/top%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>top命令可以用来方便地观察当前系统中运行的进程的信息，并可以在运行过程中执行改变进程的优先级、更改排序规则、导出状态信息等操作，非常方便。</description>
    </item>
    
    <item>
      <title>格式化输出和printf命令</title>
      <link>https://chenxiaopang.github.io/2015/08/02/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E5%92%8Cprintf%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 02 Aug 2015 17:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/08/02/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E5%92%8Cprintf%E5%91%BD%E4%BB%A4/</guid>
      <description>GNU版本的printf命令用来格式化输出，效果类似与C语言的printf函数。 2.x以上版本的Bash内建的printf命令和/usr/b</description>
    </item>
    
    <item>
      <title>Bash的作业控制</title>
      <link>https://chenxiaopang.github.io/2015/08/01/bash%E7%9A%84%E4%BD%9C%E4%B8%9A%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 01 Aug 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/08/01/bash%E7%9A%84%E4%BD%9C%E4%B8%9A%E6%8E%A7%E5%88%B6/</guid>
      <description>作业控制是Bash Shell提供的一项强大功能，它允许你选择在前台还是后台运行程序，即作业。 一、开启Bash的作业控制功能 1 2 3 # set -o monitor 或 #</description>
    </item>
    
    <item>
      <title>read命令读取用户输入</title>
      <link>https://chenxiaopang.github.io/2015/08/01/read%E5%91%BD%E4%BB%A4%E8%AF%BB%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</link>
      <pubDate>Sat, 01 Aug 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/08/01/read%E5%91%BD%E4%BB%A4%E8%AF%BB%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</guid>
      <description>read命令用于从终端或文件中读取用户输入，它读取整行输入，如果没有指定名称，读取的行被赋值给内部变量REPLY。 read命令常用选项：-a</description>
    </item>
    
    <item>
      <title>Bash中单引号和双引号的区别</title>
      <link>https://chenxiaopang.github.io/2015/06/27/bash%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 27 Jun 2015 16:48:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/27/bash%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>一、单引号和双引号的区别 1. 单引号&#39; 必须成对使用，它可以保护所有的字符不被翻译。 如变量&#39;$1&#39;，和奇数个单引号的作用相同，偶数个单引号=1个双</description>
    </item>
    
    <item>
      <title>建立菜单</title>
      <link>https://chenxiaopang.github.io/2015/06/22/%E5%BB%BA%E7%AB%8B%E8%8F%9C%E5%8D%95/</link>
      <pubDate>Mon, 22 Jun 2015 16:48:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/22/%E5%BB%BA%E7%AB%8B%E8%8F%9C%E5%8D%95/</guid>
      <description>方法一：用here文档和case语句建立 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/bin/bash while true do cat&amp;lt;&amp;lt;- ENDIT //&amp;lt;&amp;</description>
    </item>
    
    <item>
      <title>波浪号和Hyphen扩展</title>
      <link>https://chenxiaopang.github.io/2015/06/22/%E6%B3%A2%E6%B5%AA%E5%8F%B7%E5%92%8Chyphen%E6%89%A9%E5%B1%95/</link>
      <pubDate>Mon, 22 Jun 2015 16:38:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/22/%E6%B3%A2%E6%B5%AA%E5%8F%B7%E5%92%8Chyphen%E6%89%A9%E5%B1%95/</guid>
      <description>Bash将波浪号~作为路径扩展符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 扩展为当前用户主目录的全路径名 $ echo ~ /home/user 扩展为用户user的主目</description>
    </item>
    
    <item>
      <title>标准IO和重定向</title>
      <link>https://chenxiaopang.github.io/2015/06/22/%E6%A0%87%E5%87%86io%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</link>
      <pubDate>Mon, 22 Jun 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/22/%E6%A0%87%E5%87%86io%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</guid>
      <description>一、标准输入/输出/错误 当shell启动，它继承三个文件：stdin、stdout、stderr，标准输入通常来自键盘，标准输出和标准错误通</description>
    </item>
    
    <item>
      <title>Bash变量扩展修改符</title>
      <link>https://chenxiaopang.github.io/2015/06/21/bash%E5%8F%98%E9%87%8F%E6%89%A9%E5%B1%95%E4%BF%AE%E6%94%B9%E7%AC%A6/</link>
      <pubDate>Sun, 21 Jun 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/21/bash%E5%8F%98%E9%87%8F%E6%89%A9%E5%B1%95%E4%BF%AE%E6%94%B9%E7%AC%A6/</guid>
      <description>一、未设置就临时替换（:-） 冒号：用来检验变量是否设置过，如果没有冒号，则认为设置过，不替换 1 2 3 4 5 6 7 8 9 10 $ fruit=peach $ echo ${fruit:-plum} peach $ fruit= $ echo ${fruit:-plum} plum $ echo</description>
    </item>
    
    <item>
      <title>Here文档</title>
      <link>https://chenxiaopang.github.io/2015/06/10/here%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 10 Jun 2015 23:20:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/10/here%E6%96%87%E6%A1%A3/</guid>
      <description>Here文档为需要输入的程序，例如，mail、sort和cat等接收在线文本，直到遇到用户定义的结束符号为止。 最常用的用途是在Shell脚本</description>
    </item>
    
    <item>
      <title>grep的基本用法</title>
      <link>https://chenxiaopang.github.io/2015/06/09/grep%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 09 Jun 2015 23:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/09/grep%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>一、grep家族 grep: Global search Regular Expression(RE) and Print out the line grep家族包括grep、egrep和fgrep egrep和fgrep和grep只有很小的不同 egrep</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://chenxiaopang.github.io/2015/06/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 09 Jun 2015 23:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>一、基本元字符集 元字符 作用 示例 示例意义 ^ 锚定行的开始 /^love/ 匹配所有以love开头的行 $ 锚定行的结束 /love$/ 匹配所有以love结束的行 . 匹配一个字符 /l..e/ 匹</description>
    </item>
    
    <item>
      <title>Bash内置命令exec和重定向</title>
      <link>https://chenxiaopang.github.io/2015/06/06/bash%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4exec%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</link>
      <pubDate>Sat, 06 Jun 2015 23:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/06/bash%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4exec%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</guid>
      <description>Bash内置命令exec可以替换当前程序而不需要启动一个新的进程，可以改变标准输入和输出而不需要启动一个新的子进程。 如果文件用exec打开，</description>
    </item>
    
    <item>
      <title>Bash提示符</title>
      <link>https://chenxiaopang.github.io/2015/06/05/bash%E6%8F%90%E7%A4%BA%E7%AC%A6/</link>
      <pubDate>Fri, 05 Jun 2015 23:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/05/bash%E6%8F%90%E7%A4%BA%E7%AC%A6/</guid>
      <description>Bash有四种提示符 一、基本提示符PS1 即$符号，是默认的基本提示符，当Shell运行在交互模式下时，该提示符会出现在屏幕上，可以设置为其它</description>
    </item>
    
    <item>
      <title>Bash启动选项</title>
      <link>https://chenxiaopang.github.io/2015/06/05/bash%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9/</link>
      <pubDate>Fri, 05 Jun 2015 19:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/05/bash%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9/</guid>
      <description>Bash选项可以用来控制它的行为 一、选项类型 有两种选项：单字符选项和多字符选项，多字符选项必须出现在单字符选项以前 单字符选项：由一个减号和一</description>
    </item>
    
    <item>
      <title>Bash内置命令</title>
      <link>https://chenxiaopang.github.io/2015/06/05/bash%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 05 Jun 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/06/05/bash%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/</guid>
      <description>Bash有很多内置命令，因为这些命令是内置的，因此bash不需要在磁盘上为它们定位，执行速度更快。 1、列出所有内置命令列表 $ enable 2、关闭内置命</description>
    </item>
    
    <item>
      <title>Bash函数</title>
      <link>https://chenxiaopang.github.io/2015/02/21/bash%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 21 Feb 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/02/21/bash%E5%87%BD%E6%95%B0/</guid>
      <description>一、什么是Bash函数 Bash不支持goto语句，可以用function实现程序流程跳转。 当前shell中一组组织在一起并被命名的命令。 比脚</description>
    </item>
    
    <item>
      <title>Bash变量</title>
      <link>https://chenxiaopang.github.io/2015/01/31/bash%E5%8F%98%E9%87%8F/</link>
      <pubDate>Sat, 31 Jan 2015 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2015/01/31/bash%E5%8F%98%E9%87%8F/</guid>
      <description>一、变量类型 Bash变量有两种：局部变量和环境变量。 1、局部变量 局部变量的范围仅在创建它的Shell中有效。 2、环境变量 能为创建它的Shel</description>
    </item>
    
    <item>
      <title>find的基本用法</title>
      <link>https://chenxiaopang.github.io/2014/11/29/find%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 29 Nov 2014 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2014/11/29/find%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>find在Linux系统中和其它工具，如sed、awk、grep等结合起来用，非常有用。 一、列出系统中所有属于root用户的“set uid”</description>
    </item>
    
    <item>
      <title>gawk的基本用法</title>
      <link>https://chenxiaopang.github.io/2014/11/29/gawk%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 29 Nov 2014 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2014/11/29/gawk%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>GNU gawk工具的功能是将指定文件或标准输入中符合指定模式（pattern）的行按指定的动作（action）进行格式化处理。 一、语法 1 2 3 gawk [options]</description>
    </item>
    
    <item>
      <title>sed的基本用法</title>
      <link>https://chenxiaopang.github.io/2014/11/29/sed%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 29 Nov 2014 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2014/11/29/sed%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>一、什么是sed sed命令是一个流线式、非交互式编辑器，可以实现在vi等编辑器中一样的编辑效果。 二、sed的工作原理 1. 模式空间（patter</description>
    </item>
    
    <item>
      <title>Bash Shell执行命令的优先级</title>
      <link>https://chenxiaopang.github.io/2014/11/06/bash-shell%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Thu, 06 Nov 2014 16:18:26 +0800</pubDate>
      
      <guid>https://chenxiaopang.github.io/2014/11/06/bash-shell%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>1、别名 2、关键字 if、function、while 、until等 3、函数 4、内置命令 5、可执行程序或脚本</description>
    </item>
    
  </channel>
</rss>
